# frozen_string_literal: true

require('starkcore')
require_relative('pix_request')
require_relative('../utils/rest')

module StarkInfra
  class PixRequest
    # # PixRequest::Log object
    #
    # Every time a PixRequest entity is modified, a corresponding PixRequest::Log is generated for the entity.
    # This log is never generated by the user.
    #
    # ## Attributes (return-only):
    # - id [string]: unique id returned when the log is created. ex: '5656565656565656'
    # - request [PixRequest object]: PixRequest entity to which the log refers to.
    # - type [string]: type of the PixRequest event which triggered the log creation. ex: "sent", "denied", "failed", "created", "success", "approved", "credited", "refunded", "processing"
    # - errors [list of strings]: list of errors linked to this PixRequest event.
    # - created [DateTime]: creation datetime for the log. ex: DateTime.new(2020, 3, 10, 10, 30, 0, 0)
    class Log < StarkCore::Utils::Resource
      attr_reader :id, :created, :type, :errors, :request
      def initialize(id:, created:, type:, errors:, request:)
        super(id)
        @created = StarkCore::Utils::Checks.check_datetime(created)
        @type = type
        @errors = errors
        @request = request
      end

      # # Retrieve a specific PixRequest::Log
      #
      # Receive a single PixRequest::Log object previously created by the Stark Infra API by passing its id
      #
      # ## Parameters (required):
      # - id [string]: object unique id. ex: '5656565656565656'
      #
      # ## Parameters (optional):
      # - user [Organization/Project object, default nil]: Organization or Project object. Not necessary if StarkInfra.user was set before function call
      #
      # ## Return:
      # - PixRequest::Log object with updated attributes
      def self.get(id, user: nil)
        StarkInfra::Utils::Rest.get_id(id: id, user: user, **resource)
      end

      # # Retrieve PixRequest::Logs
      #
      # Receive a generator of PixRequest::Log objects previously created in the Stark Infra API
      #
      # ## Parameters (optional):
      # - limit [integer, default nil]: maximum number of objects to be retrieved. Unlimited if nil. ex: 35
      # - after [Date or string, default nil]: date filter for objects created only after specified date. ex: Date.new(2020, 3, 10)
      # - before [Date or string, default nil]: date filter for objects created only before specified date. ex: Date.new(2020, 3, 10)
      # - types [list of strings, default nil]: filter retrieved objects by types. ex: 'success' or 'failed'
      # - request_ids [list of strings, default nil]: list of PixRequest ids to filter retrieved objects. ex: ['5656565656565656', '4545454545454545']
      # - reconciliation_id [string, default nil]: PixRequest reconciliation id to filter retrieved objects. ex: "b77f5236-7ab9-4487-9f95-66ee6eaf1781"
      # - ids [list of strings, default nil]: Log ids to filter PixKey Logs. ex: ['5656565656565656']
      # - user [Organization/Project object, default nil]: Organization or Project object. Not necessary if StarkInfra.user was set before function call
      #
      # ## Return:
      # - generator of PixRequest::Log objects with updated attributes
      def self.query(limit: nil, after: nil, before: nil, types: nil, request_ids: nil, reconciliation_id: nil, user: nil)
        after = StarkCore::Utils::Checks.check_date(after)
        before = StarkCore::Utils::Checks.check_date(before)
        StarkInfra::Utils::Rest.get_stream(
          limit: limit,
          after: after,
          before: before,
          types: types,
          request_ids: request_ids,
          reconciliation_id: reconciliation_id,
          user: user,
          **resource
        )
      end

      # # Retrieve paged PixRequest::Logs
      #
      # Receive a list of up to 100 PixRequest::Log objects previously created in the Stark Infra API and the cursor to the next page.
      # Use this function instead of query if you want to manually page your logs.
      #
      # ## Parameters (optional):
      # - cursor [string, default nil]: cursor returned on the previous page function call
      # - limit [integer, default 100]: maximum number of objects to be retrieved. Max = 100. ex: 35
      # - after [Date or string, default nil]: date filter for objects created only after specified date. ex: Date.new(2020, 3, 10)
      # - before [Date or string, default nil]: date filter for objects created only before specified date. ex: Date.new(2020, 3, 10)
      # - types [list of strings, default nil]: filter retrieved objects by types. ex: 'success' or 'failed'
      # - request_ids [list of strings, default nil]: list of PixRequest ids to filter retrieved objects. ex: ['5656565656565656', '4545454545454545']
      # - reconciliation_id [string]: PixRequest reconciliation id to filter retrieved objects. ex: "b77f5236-7ab9-4487-9f95-66ee6eaf1781"
      # - user [Organization/Project object, default nil]: Organization or Project object. Not necessary if StarkInfra.user was set before function call
      #
      # ## Return:
      # - list of PixRequest::Log objects with updated attributes
      # - cursor to retrieve the next page of Log objects
      def self.page(cursor: nil, limit: nil, after: nil, before: nil, types: nil, request_ids: nil, reconciliation_id: nil, user: nil)
        after = StarkCore::Utils::Checks.check_date(after)
        before = StarkCore::Utils::Checks.check_date(before)
        StarkInfra::Utils::Rest.get_page(
          cursor: cursor,
          limit: limit,
          after: after,
          before: before,
          types: types,
          request_ids: request_ids,
          reconciliation_id: reconciliation_id,
          user: user,
          **resource
        )
      end

      def self.resource
        request_maker = StarkInfra::PixRequest.resource[:resource_maker]
        {
          resource_name: 'PixRequestLog',
          resource_maker: proc { |json|
            Log.new(
              id: json['id'],
              request: StarkCore::Utils::API.from_api_json(request_maker, json['request']),
              type: json['type'],
              errors: json['errors'],
              created: json['created']
            )
          }
        }
      end
    end
  end
end
